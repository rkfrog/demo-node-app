name: demo-node-app-npm-publish

on:
  push:
    branches:
      - main
  pull_request:
    types: 
      - closed
    branches:
      - main
  workflow_dispatch:

jobs:
  npm-docker-build-and-publish-dev:
    runs-on: ubuntu-20.04
    steps:
      - run: |
          echo "The job was triggered by a ${{ github.event_name }} event."
      - name: Check out repository code üõéÔ∏è
        uses: actions/checkout@v3
      - run: |
          echo "${{ github.repository }} repository has been cloned to the runner."
      - name: List files in the repository
        run: |
          ls -ltrh ${{ github.workspace }}
      - name: Use Node.js
        uses: actions/setup-node@v3
        with: 
          node-version: "18.5.0"
          registry-url: "https://${{ env.JF_URL}}/demonode-npm-dev-virtual/"
          always-auth: true
        env:
          JF_URL: https://${{ secrets.JF_RK_SA_URL }}
      - name: JFrog CLI setup üê∏
        uses: jfrog/setup-jfrog-cli@v3
        env:
          JF_URL: https://${{ secrets.JF_RK_SA_URL }}
          JF_USER: ${{ secrets.JF_RK_USERNAME }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_RK_TOKEN }}
      - name: Health check JFrog Artifactory instance
        run: |
          jf rt ping
          jf config s
      - name: Capture previous build version
        run: echo NPM_PACKAGE_BUILD_VERSION=$(cat package.json | jq -r ."version") >> $GITHUB_ENV
      - name: Set JF NPM Config
        run:  jfrog npm-config --repo-deploy=frogs-npm-dev-virtual -repo-resolve=frogs-npm-dev-virtual 
      - name: Install dependencies
        run: jfrog npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_RK_JRT_NPM_VIRTUAL_TOKEN }}
      - name: Gather build details
        run: |
          jfrog rt build-add-git
          jfrog rt build-collect-env
      - name: JFrog audit
        run: |
          jfrog audit
      - name: NPM publish üê∏
        run: jfrog npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_RK_JRT_NPM_VIRTUAL_TOKEN }}
      - name: Login to JFrog Docker repo
        uses: docker/login-action@v2
        with:
          registry: https://${{ secrets.JF_RK_SA_URL }}
          username: ${{ secrets.JF_RK_USERNAME }}
          password: ${{ secrets.JF_RK_TOKEN }}
      # - name: Docker Build and push üê≥
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: .
      #     file: ./Dockerfile
      #     push: true
      #     tags: ${{ env.JF_URL }}/demonode-docker-virtual/demo-node-app:${{ env.NPM_PACKAGE_BUILD_VERSION }}
      #     secrets: |
      #       GIT_AUTH_TOKEN=${{ secrets.JF_RK_TOKEN }}
      #   env:
      #     JF_URL: ${{ secrets.JF_RK_SA_URL }}
      - name: Docker Build üê≥üê∏
        run: |
          jfrog docker image build --tag ${{ env.JF_URL }}/frogs-docker-dev-virtual/demo-node-app:${{ env.NPM_PACKAGE_BUILD_VERSION }} .
        env:
          JF_URL: ${{ secrets.JF_RK_SA_URL }}
      - name: docker image scan ${{ env.JF_URL }}/frogs-docker-dev-virtual/demo-node-app:${{ env.NPM_PACKAGE_BUILD_VERSION }}
        run: |
          jfrog docker scan frogs-docker-dev-virtual
      - name: Docker Push üê≥üê∏
        run: |
          jfrog docker push ${{ env.JF_URL }}/frogs-docker-dev-virtual/demo-node-app:${{ env.NPM_PACKAGE_BUILD_VERSION }}
        env:
          JF_URL: ${{ secrets.JF_RK_SA_URL }}
      - name: JFrog build publish üê∏
        run: jfrog rt build-publish
      - name: JFrog build scan üê∏
        run: |
          sleep 30
          jfrog bs ${{ github.workflow }} ${{ github.run_number }} --vuln=true