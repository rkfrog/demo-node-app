name: demo-node-app-npm-publish

on:
  push:
    branches:
      - main
  pull_request:
    types: 
      - closed
    branches:
      - main
  workflow_dispatch:

jobs:
  npm-docker-build-and-publish-dev:
    runs-on: ubuntu-20.04
    env:
      NPM_JF_RT_REPO: ${{ vars.NPM_JF_RT_REPO }}
      DOCKER_JF_RT_REPO: ${{ vars.DOCKER_JF_RT_REPO }}
      JF_RT_PROJECT_NAME: ${{ vars.JF_RT_PROJECT_NAME }}
    steps:
      - run: |
          echo "The job was triggered by a ${{ github.event_name }} event."
      - name: Check out repository code üõéÔ∏è
        uses: actions/checkout@v3
      - run: |
          echo "${{ github.repository }} repository has been cloned to the runner."
      - name: List files in the repository
        run: |
          ls -la ${{ github.workspace }}
      - name: Use Node.js
        uses: actions/setup-node@v3
        with: 
          node-version: "18.5.0"
      - name: JFrog CLI setup üê∏
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: https://${{ secrets.JF_PLATFORM_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
      - name: Health check JFrog Artifactory instance üê∏
        run: |
          jfrog rt ping
          jfrog config show
      - name: Capture previous build version
        run: echo NPM_PACKAGE_BUILD_VERSION=$(cat package.json | jq -r ."version") >> $GITHUB_ENV
      - name: Set JF NPM Config
        run:  |
          jfrog npm-config --repo-deploy=$NPM_JF_RT_REPO -repo-resolve=$NPM_JF_RT_REPO
          jfrog npm config list | jq -r .registry
      - name: Install dependencies
        run: jfrog npm ci
      - name: Gather build details üê∏
        run: |
          jfrog rt build-add-git --project $JF_RT_PROJECT_NAME
          jfrog rt build-collect-env --project $JF_RT_PROJECT_NAME
      # - name: JFrog audit üê∏
      #   run: |
      #     jfrog audit
      - name: NPM publish üê∏
        run: jfrog npm publish --project $JF_RT_PROJECT_NAME
      - name: JFrog build publish NPM üê∏
        run: jfrog rt build-publish --project $JF_RT_PROJECT_NAME
      - name: Login to JFrog Docker repo
        uses: docker/login-action@v3
        with:
          registry: https://${{ secrets.JF_PLATFORM_URL }}
          username: ${{ secrets.JF_USERNAME }}
          password: ${{ secrets.JF_ACCESS_TOKEN }}
      - name: Docker Build üê≥üê∏
        run: |
          jfrog docker image build --tag ${{ env.JF_URL }}/$DOCKER_JF_RT_REPO/demo-node-app:${{ env.NPM_PACKAGE_BUILD_VERSION }} --build-arg="REGISTRY_URL=${{ env.JF_URL }}" --build-arg="DOCKER_REPO_NAME=$DOCKER_JF_RT_REPO" .
        env:
          JF_URL: ${{ secrets.JF_PLATFORM_URL }}
      # - name: JFrog build publish docker üê∏
      #   run: jfrog rt build-docker-create $DOCKER_JF_RT_REPO --image-file=${{ env.JF_URL }}/$DOCKER_JF_RT_REPO/demo-node-app:${{ env.NPM_PACKAGE_BUILD_VERSION }} --project $JF_RT_PROJECT_NAME
      #   env:
      #     JF_URL: ${{ secrets.JF_PLATFORM_URL }}
      - name: docker image scan üê≥üê∏
        run: |
          jfrog docker scan ${{ env.JF_URL }}/$DOCKER_JF_RT_REPO/demo-node-app:${{ env.NPM_PACKAGE_BUILD_VERSION }}
        env:
          JF_URL: ${{ secrets.JF_PLATFORM_URL }}
      - name: Docker Push üê≥üê∏
        run: |
          jfrog docker push ${{ env.JF_URL }}/$DOCKER_JF_RT_REPO/demo-node-app:${{ env.NPM_PACKAGE_BUILD_VERSION }}
        env:
          JF_URL: ${{ secrets.JF_PLATFORM_URL }}
      - name: JFrog build publish üê∏
        run: jfrog rt build-publish --project $JF_RT_PROJECT_NAME
      - name: JFrog build scan üê∏
        run: |
          sleep 30
          jfrog bs ${{ github.workflow }} ${{ github.run_number }} --vuln=true